apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: flavours
  labels:
    app: backend
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: backend-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: backend
        image: gcr.io/flavours-production/backend:latest
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: GOOGLE_CLOUD_PROJECT_ID
          value: "flavours-production"
        - name: GOOGLE_CLOUD_REGION
          value: "us-central1"
        - name: GOOGLE_CLOUD_ZONE
          value: "us-central1-a"
        - name: GOOGLE_CLOUD_STORAGE_BUCKET
          value: "flavours-production-media"
        - name: GOOGLE_CLOUD_SQL_INSTANCE
          value: "flavours-production-db"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: SUPABASE_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: supabase-url
        - name: SUPABASE_SERVICE_ROLE_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: supabase-service-role-key
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: stripe-secret-key
        - name: FIREBASE_PROJECT_ID
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: firebase-project-id
        - name: FIREBASE_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: firebase-private-key
        - name: FIREBASE_CLIENT_EMAIL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: firebase-client-email
        - name: FIREBASE_STORAGE_BUCKET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: firebase-storage-bucket
        - name: LOG_LEVEL
          value: "info"
        - name: ENABLE_METRICS
          value: "true"
        - name: ENABLE_HEALTH_CHECKS
          value: "true"
        ports:
        - name: http
          containerPort: 3001
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: uploads
          mountPath: /app/uploads
        - name: temp
          mountPath: /tmp
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: gcp-secrets
          mountPath: /app/secrets
          readOnly: true
      volumes:
      - name: logs
        emptyDir: {}
      - name: uploads
        emptyDir: {}
      - name: temp
        emptyDir: {}
      - name: config
        configMap:
          name: app-config
      - name: gcp-secrets
        secret:
          secretName: gcp-service-account
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: flavours
spec:
  selector:
    app: backend
  ports:
  - name: http
    port: 3001
    targetPort: 3001
  - name: metrics
    port: 9090
    targetPort: 9090
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-service-account
  namespace: flavours
  annotations:
    iam.gke.io/gcp-service-account: flavours-backend@flavours-production.iam.gserviceaccount.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-ingress
  namespace: flavours
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "flavours-backend-ip"
    networking.gke.io/managed-certificates: "flavours-backend-ssl-cert"
    kubernetes.io/ingress.allow-http: "false"
spec:
  tls:
  - hosts:
    - api.flavours.app
    secretName: backend-tls
  rules:
  - host: api.flavours.app
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: flavours-backend-ssl-cert
  namespace: flavours
spec:
  domains:
    - api.flavours.app
