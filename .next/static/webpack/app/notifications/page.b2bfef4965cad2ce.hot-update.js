"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/notifications/page",{

/***/ "(app-pages-browser)/./lib/api-client.ts":
/*!***************************!*\
  !*** ./lib/api-client.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiClient: function() { return /* binding */ ApiClient; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/**\n * Production-ready API client with error handling, retries, and caching\n */ class ApiClient {\n    async makeRequest(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const { method = \"GET\", headers = {}, body, timeout = this.timeout, retries = this.retries } = options;\n        const url = \"\".concat(this.baseURL).concat(endpoint);\n        const cacheKey = \"\".concat(method, \":\").concat(url, \":\").concat(JSON.stringify(body || {}));\n        // Check cache for GET requests\n        if (method === \"GET\") {\n            const cached = this.cache.get(cacheKey);\n            if (cached && Date.now() - cached.timestamp < this.cacheTTL) {\n                return cached.data;\n            }\n        }\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), timeout);\n        try {\n            const response = await fetch(url, {\n                method,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...headers\n                },\n                body: body ? JSON.stringify(body) : undefined,\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            }\n            const data = await response.json();\n            // Cache successful GET requests\n            if (method === \"GET\") {\n                this.cache.set(cacheKey, {\n                    data,\n                    timestamp: Date.now()\n                });\n            }\n            return data;\n        } catch (error) {\n            clearTimeout(timeoutId);\n            if (retries > 0 && this.shouldRetry(error)) {\n                await this.delay(this.retryDelay);\n                return this.makeRequest(endpoint, {\n                    ...options,\n                    retries: retries - 1\n                });\n            }\n            throw error;\n        }\n    }\n    shouldRetry(error) {\n        var _error_message, _error_message1;\n        if (error.name === \"AbortError\") return false;\n        if ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"HTTP 4\")) return false // Don't retry client errors\n        ;\n        if ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"HTTP 5\")) return true // Retry server errors\n        ;\n        return true;\n    }\n    delay(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    // Public methods\n    async get(endpoint, options) {\n        return this.makeRequest(endpoint, {\n            ...options,\n            method: \"GET\"\n        });\n    }\n    async post(endpoint, body, options) {\n        return this.makeRequest(endpoint, {\n            ...options,\n            method: \"POST\",\n            body\n        });\n    }\n    async put(endpoint, body, options) {\n        return this.makeRequest(endpoint, {\n            ...options,\n            method: \"PUT\",\n            body\n        });\n    }\n    async delete(endpoint, options) {\n        return this.makeRequest(endpoint, {\n            ...options,\n            method: \"DELETE\"\n        });\n    }\n    async patch(endpoint, body, options) {\n        return this.makeRequest(endpoint, {\n            ...options,\n            method: \"PATCH\",\n            body\n        });\n    }\n    // Clear cache\n    clearCache() {\n        this.cache.clear();\n    }\n    // Set cache TTL\n    setCacheTTL(ttl) {\n        this.cacheTTL = ttl;\n    }\n    constructor(config){\n        this.cache = new Map();\n        this.cacheTTL = 5 * 60 * 1000 // 5 minutes\n        ;\n        this.baseURL = config.baseURL;\n        this.timeout = config.timeout || 10000;\n        this.retries = config.retries || 3;\n        this.retryDelay = config.retryDelay || 1000;\n    }\n}\n// Create singleton instance\nconst apiClient = new ApiClient({\n    baseURL: process.env.NEXT_PUBLIC_API_URL || \"http://localhost:3001/api/v1\",\n    timeout: 10000,\n    retries: 3,\n    retryDelay: 1000\n});\n// Add authentication methods to the client\napiClient.login = async (email, password)=>{\n    return apiClient.post(\"/auth/login\", {\n        email,\n        password\n    });\n};\napiClient.register = async (userData)=>{\n    return apiClient.post(\"/auth/register\", userData);\n};\napiClient.logout = async ()=>{\n    return apiClient.post(\"/auth/logout\");\n};\napiClient.getCurrentUser = async ()=>{\n    return apiClient.get(\"/auth/me\");\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (apiClient);\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api-client.ts\n"));

/***/ })

});